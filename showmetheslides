#!/usr/bin/perl

use FindBin;
use lib "$FindBin::Bin/mojo/lib";

use Mojolicious::Lite;
use Mojo::JSON;

@ARGV = qw/daemon/ unless @ARGV;

my $config =
  plugin 'json_config' => {default => {addresses => [qw/127.0.0.1/]}};

my $CLIENTS = {};
my $SLIDES  = _read_slides('showmetheslides.pod');
my $TOTAL   = @$SLIDES;
my $CURRENT = 0;

websocket '/' => sub {
    my $self = shift;
    my $tx   = $self->tx;

    my $is_logged_in = $self->stash('logged_in');

    my $cid = _get_id($self);

    $CLIENTS->{$cid} = $tx;

    my $total_clients = keys %$CLIENTS;
    my $ip            = $tx->remote_address;
    app->log->debug("Client '$ip' connected [$total_clients]");

    _send_message(
        $self,
        type    => 'status',
        current => $CURRENT,
        total   => $TOTAL
    );

    my $slide = _get_slide($CURRENT);
    $slide->{content} ||= <<EOF;
Presentation is not yet started.
EOF
    _send_message($self, type => 'slide', %$slide);

    _send_message_to_all($self, type => 'status', clients => $total_clients);

    $self->receive_message(
        sub {
            my ($self, $message) = @_;

            my $json = Mojo::JSON->new;

            $message = $json->decode($message);
            return unless $message || $json->error;

            my $action = $message->{action} || '';

            if (_is_speaker($self)) {
                app->log->debug("Message '$action' from manager received");

                my $slide;
                if ($action eq 'first') {
                    $CURRENT = 1;
                    $slide   = _get_slide($CURRENT);
                }
                elsif ($action eq 'last') {
                    $CURRENT = $TOTAL;
                    $slide   = _get_slide($TOTAL);
                }
                elsif ($action eq 'next') {
                    $CURRENT++ unless $CURRENT >= $TOTAL;
                    $slide = _get_slide($CURRENT);
                }
                elsif ($action eq 'prev') {
                    $CURRENT-- unless $CURRENT <= 1;
                    $slide = _get_slide($CURRENT);
                }

                if ($slide) {
                    _send_message_to_all(
                        $self,
                        type    => 'status',
                        current => $CURRENT
                    );
                    _send_message_to_all($self, type => 'slide', %$slide);
                }
            }
        }
    );

    $self->finished(
        sub {
            delete $CLIENTS->{$cid};

            my $total_clients = keys %$CLIENTS;
            _send_message_to_all(
                $self,
                type    => 'status',
                clients => $total_clients
            );

            app->log->debug('Client disconnected');
        }
    );
};

get '/' => sub {
    my $self = shift;

    $self->stash(speaker => _is_speaker($self));
} => 'index';

sub _is_speaker {
    my $self = shift;
    my $tx   = $self->tx;

    my $remote_address = $tx->remote_address;

    my $found = grep { $_ eq $remote_address } @{$config->{addresses}};

    return $found ? 1 : 0;
}

sub _get_id {
    my $self = shift;

    my $tx = $self->tx;
    return "$tx";
}

sub _message_to_json {
    my %message = @_;

    my $json = Mojo::JSON->new;
    return $json->encode({%message});
}

sub _send_message {
    my $self = shift;

    $self->send_message(_message_to_json(@_));
}

sub _send_message_to_other {
    my $self    = shift;
    my %message = @_;

    my $id = _get_id($self);

    my $message = _message_to_json(%message);

    foreach my $cid (keys %$CLIENTS) {
        next if $cid eq $id;

        my $player = $CLIENTS->{$cid};

        # If player is connected
        if ($player && $player->{tx}) {
            $CLIENTS->{$cid}->{tx}->send_message($message);
        }

        # Cleanup disconnected player
        else {
            delete $CLIENTS->{$cid};
        }
    }
}

sub _send_message_to_all {
    _send_message_to_other(@_);
    _send_message(@_);
}

sub _read_slides {
    my $filename = shift;

    $filename = app->home->rel_file($filename);
    open my $file, "<:encoding(UTF-8)", $filename
      or die "Can't read slides from $filename: $!";
    my $slurp = do { local $/; <$file> };

    $slurp .= '[[[ ]]]';

    my @slides;
    while ($slurp =~ s/\[\[\[(.*?)\]\]\](.*?)(?=\[\[\[)//s) {
        my $name    = $1;
        my $content = $2;

        $name =~ s/^\s+//;
        $name =~ s/\s+$//;

        $content =~ s/^\s+//;
        $content =~ s/\s+$//;

        my $slide = {};

        $slide->{name}    = $name;
        $slide->{content} = $content;

        push @slides, $slide;
    }

    return \@slides;
}

sub _get_slide {
    my $number = shift;

    if ($number > 0 && $number <= @$SLIDES) {
        my $slide = $SLIDES->[$number - 1];
        return $slide;
    }

    return;
}


# see script/flash-policy-server
print
  "Remember, you need to also run script/flash-policy-server as root for this to work...\n";

app->start;

1;

__DATA__

@@ index.html.ep
% layout 'wrapper';
Please, enable JavaScript.<br /><br />

If your browser doesn't support Websockets,<br />
make sure you have Flash<br />
installed. It is used as workaround.

@@ layouts/wrapper.html.ep
% my $url = $self->req->url->to_abs->scheme($self->req->is_secure ? 'wss' : 'ws')->path('/');
<!doctype html><html>
    <head>
        <title>Presentation</title>
        <link rel="stylesheet" href="/main.css" type="text/css" />
        <script type="text/javascript" src="/jquery.min.js"></script>
        <script type="text/javascript" src="/jquery.json.min.js"></script>
        <script type="text/javascript" src="/websocketPresentation.js"></script>
        <script type="text/javascript">
            // Only load the flash fallback when needed
            if (!('WebSocket' in window)) {
                document.write([
                    '<scr'+'ipt type="text/javascript" src="/web-socket-js/swfobject.js"></scr'+'ipt>',
                    '<scr'+'ipt type="text/javascript" src="/web-socket-js/FABridge.js"></scr'+'ipt>',
                    '<scr'+'ipt type="text/javascript" src="/web-socket-js/web_socket.js"></scr'+'ipt>'
                ].join(''));
            }
        </script>
        <script type="text/javascript">
            if (WebSocket.__initialize) {
                // Set URL of your WebSocketMain.swf here:
                WebSocket.__swfLocation = '/web-socket-js/WebSocketMain.swf';
            }

            $(document).ready(function() {
                $('#slide').websocketPresentation({
                    "url":"<%= $url %>",
                    "speaker":"<%= stash 'speaker' %>"
                });
            });
        </script>
    </head>
    <body>
        <div id="status">
            clients: <span id="websocket-presentation-clients">n/a</span><br />
            slides: <span id="websocket-presentation-current">n/a</span> / 
            <span id="websocket-presentation-total">n/a</span>
        </div>
        <div class="container">
            <table border="0" height="100%" style="margin:auto">
            <tr><td style="vertical-align:middle">
                <div id="slide">
                    <%== content %>
                </div>
            </td></tr>
            </table>
        </div>
    </body>
</html>
