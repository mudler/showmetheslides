#!/usr/bin/perl

use FindBin;
use lib "$FindBin::Bin/extlib/mojo/lib";
use lib "$FindBin::Bin/extlib/text-markdown/lib";
use lib "$FindBin::Bin/extlib/mojolicious-plugin-websocket-chat/lib";

use Mojo::ByteStream;
use Mojo::IOLoop;
use Mojo::JSON;
use Mojolicious::Lite;
use Text::Markdown;

my $slides_file = pop @ARGV;

my $config =
  plugin 'json_config' => {default => {password => '123456', slideshow => 0}};

plugin 'web_socket-chat' => {path => '/chat'};

my $CLIENTS = {};
my ($METADATA, $SLIDES)  = _read_slides($slides_file);
my $TOTAL   = @$SLIDES;
my $CURRENT = 0;

my $loop = Mojo::IOLoop->singleton;

websocket '/' => sub {
    my $self = shift;
    my $tx   = $self->tx;

    my $cid = _get_id($self);

    $CLIENTS->{$cid} = $tx;

    my $total_clients = keys %$CLIENTS;
    my $ip            = $tx->remote_address;
    app->log->debug("Client '$ip/$cid' connected [$total_clients]");

    _send_message(
        $self,
        type    => 'status',
        current => $CURRENT,
        total   => $TOTAL
    );

    my $slide = _get_slide($CURRENT);
    $slide->{title} = 'Presentation';
    $slide->{content} ||= <<EOF;
Presentation is not yet started.
EOF
    _send_message($self, type => 'slide', %$slide);

    _send_message_to_all($self, type => 'status', clients => $total_clients);

    $self->receive_message(
        sub {
            my ($self, $message) = @_;

            my $json = Mojo::JSON->new;

            $message = $json->decode($message);
            return unless $message || $json->error;

            my $action = $message->{action} || '';

            if (_is_speaker($self)) {
                app->log->debug("Message '$action' from manager received");

                if ($action eq 'first') {
                    _first_slide($self);
                }
                elsif ($action eq 'last') {
                    _last_slide($self);
                }
                elsif ($action eq 'next') {
                    _next_slide($self);
                }
                elsif ($action eq 'prev') {
                    _prev_slide($self);
                }
            }
        }
    );

    $self->finished(
        sub {
            delete $CLIENTS->{$cid};

            my $total_clients = keys %$CLIENTS;
            _send_message_to_all(
                $self,
                type    => 'status',
                clients => $total_clients
            );

            app->log->debug('Client disconnected');
        }
    );
};

get '/' => sub {
    my $self = shift;

    my $url = $self->req->url->base->clone;
    $url->scheme($self->req->is_secure ? 'wss' : 'ws');
    $url->query->params([]);

    $self->stash(websocket_url => $url->to_abs);
    $self->stash(websocket_chat_url => $url->path('/chat')->to_abs);

    $self->stash(speaker => _is_speaker($self));

    $self->stash(header => $METADATA->{header});
    $self->stash(footer => $METADATA->{footer});
    $self->stash(logo => $METADATA->{logo});
} => 'index';

any '/login' => sub {
    my $self = shift;

    return unless $self->req->method eq 'POST';

    my $password = $self->param('password');

    return $self->render_text('Sorry')
      unless $password && $password eq $config->{password};

    $self->session->{speaker} = 1;

    return $self->redirect_to('/');
} => 'login';

get '/logout' => sub {
    my $self = shift;

    delete $self->session->{speaker};

    return $self->redirect_to('/');
};

sub _first_slide {
    my $self = shift;

    $CURRENT = 1;
    my $slide   = _get_slide($CURRENT);

    _send_slide($self);
}

sub _last_slide {
    my $self = shift;

    $CURRENT = $TOTAL - 1;
    my $slide   = _get_slide($CURRENT);

    _send_slide($self);
}

sub _prev_slide {
    my $self = shift;

    $CURRENT = $CURRENT <= 1 ? $TOTAL : $CURRENT - 1;
    my $slide = _get_slide($CURRENT);
    _send_slide($self, $slide);
}

sub _next_slide {
    my $self = shift;

    $CURRENT = $CURRENT >= $TOTAL ? 1 : $CURRENT + 1;
    my $slide = _get_slide($CURRENT);
    _send_slide($self, $slide);
}

sub _send_slide {
    my ($self, $slide) = @_;

    if ($slide) {
        _send_message_to_all(
            $self,
            type    => 'status',
            current => $CURRENT
        );

        _send_message_to_all($self, type => 'slide', %$slide);

        if ($config->{slideshow}) {
            $loop->timer(
                $config->{slideshow} => sub { _next_slide($self) });
        }
    }
}

sub _is_speaker {
    my $self = shift;
    my $tx   = $self->tx;

    return $self->session->{speaker};
}

sub _get_id {
    my $self = shift;

    my $tx = $self->tx;
    my $cid = "$tx";
    #$cid =~ s/\(.*?\)/$1/;
    return $cid;
}

sub _message_to_json {
    my %message = @_;

    my $json = Mojo::JSON->new;
    my $message = $json->encode({%message});

    $message = Mojo::ByteStream->new($message)->decode('utf-8');

    return $message;
}

sub _send_message {
    my $self = shift;

    $self->send_message(_message_to_json(@_));
}

sub _send_message_to_other {
    my $self    = shift;
    my %message = @_;

    my $id = _get_id($self);

    my $message = _message_to_json(%message);

    foreach my $cid (keys %$CLIENTS) {
        next if $cid eq $id;

        my $player = $CLIENTS->{$cid};

        # If player is connected
        $player->send_message($message) if $player;
    }
}

sub _send_message_to_all {
    _send_message_to_other(@_);
    _send_message(@_);
}

sub _read_slides {
    my $filename = shift;

    $filename = app->home->rel_file($filename);
    open my $file, "<:encoding(UTF-8)", $filename
      or die "Can't read slides from $filename: $!";
    my $slurp = do { local $/; <$file> };

    $slurp .= '@';

    my $metadata = {};
    if ($slurp =~ s/^(.*?)\s*(?=@)//s) {
        foreach (split /\n/ => $1) {
            my ($name, $value) = ($_ =~ m/(.*?):\s*(.*)/);
            $metadata->{lc $name} = $value;
        }
    }

    my $m = Text::Markdown->new;

    my @slides;
    while ($slurp =~ s/^\@(.*?)(?=^\@)//ms) {
        my $content = $1;

        $content =~ s/^\s+//;
        $content =~ s/\s+$//;

        my $slide = {};

        $slide->{content} = $m->markdown($content);

        push @slides, $slide;
    }

    return ($metadata, \@slides);
}

sub _get_slide {
    my $number = shift;

    if ($number > 0 && $number <= @$SLIDES) {
        my $slide = $SLIDES->[$number - 1];
        return $slide;
    }

    return;
}


# see script/flash-policy-server
#print
#  "Remember, you need to also run script/flash-policy-server as root for this to work...\n";

app->start('daemon', @ARGV);

1;

__DATA__

@@ index.html.ep
% layout 'wrapper';
Please, enable JavaScript.<br /><br />

If your browser doesn't support Websockets,<br />
make sure you have Flash<br />
installed. It is used as workaround.

@@ login.html.ep
<form action="/login" method="post">
<input type="password" name="password" />
</form>

@@ layouts/wrapper.html.ep
<!doctype html><html>
    <head>
        <title>Presentation</title>
        <link rel="stylesheet" href="/960/reset.css" type="text/css" />
        <link rel="stylesheet" href="/main.css" type="text/css" />

        <script type="text/javascript" src="/jquery.min.js"></script>
        <script type="text/javascript" src="/jquery.json.min.js"></script>
        <script type="text/javascript" src="/websocketChat.js"></script>
        <script type="text/javascript" src="/websocketPresentation.js"></script>
        <script type="text/javascript">
            // Only load the flash fallback when needed
            if (!('WebSocket' in window)) {
                document.write([
                    '<scr'+'ipt type="text/javascript" src="/web-socket-js/swfobject.js"></scr'+'ipt>',
                    '<scr'+'ipt type="text/javascript" src="/web-socket-js/FABridge.js"></scr'+'ipt>',
                    '<scr'+'ipt type="text/javascript" src="/web-socket-js/web_socket.js"></scr'+'ipt>'
                ].join(''));
            }
        </script>
        <script type="text/javascript">
            if (WebSocket.__initialize) {
                // Set URL of your WebSocketMain.swf here:
                WebSocket.__swfLocation = '/web-socket-js/WebSocketMain.swf';
            }

            $(document).ready(function() {
                $('#slide').websocketPresentation({
                    "url":"<%= stash 'websocket_url' %>",
                    "speaker":"<%= stash 'speaker' %>"
                });

                $('#chat-window').websocketChat({"url":"<%= stash 'websocket_chat_url' %>"});
                $('#chat-window').hide();
                $('#toggle').click(function() {
                    $('#chat-window').toggle();
                    return false;
                });
            });
        </script>
    </head>
    <body>
% if (my $header = stash 'header') {
        <div id="header">
        <%== $header %>
        </div>
% }
        <div id="status">
            clients: <span id="websocket-presentation-clients">n/a</span><br />
            slides: <span id="websocket-presentation-current">n/a</span> / 
            <span id="websocket-presentation-total">n/a</span>
        </div>
% if (my $logo = stash 'logo') {
        <div id="logo">
        <img src="<%= $logo %>" />
        </div>
% }
        <div id="chat">
            <div id="chat-menu"><a href="" id="toggle">Chat</a></div>
            <div id="chat-window"></div>
        </div>
        <div class="container">
            <table border="0" height="100%" style="margin:auto">
            <tr><td style="vertical-align:middle">
                <div id="slide">
                    <%== content %>
                </div>
            </td></tr>
            </table>
        </div>
% if (my $footer = stash 'footer') {
        <div id="footer">
        <%== $footer %>
        </div>
% }
    </body>
</html>
